context:
  content: |
    <p class="lede">Rachel Andrew is a Director of edgeofmyseat.com, a UK web development consultancy and creators of the small content management system, Perch. She is the author of a number of books, and is a regular columnist for A List Apart.</p>

    She curates a popular [email newsletter on CSS Layout](http://csslayout.news/), and will be launching a [CSS Layout online workshop](https://thecssworkshop.com/) in early 2016.

    When not writing about business and technology on her blog at [rachelandrew.co.uk](https://rachelandrew.co.uk) or [speaking at conferences](http://lanyrd.com/profile/rachelandrew/), you will usually find Rachel running up and down one of the giant hills in Bristol.

    <span class="caption">Photo: [James Duncan Davidson](http://duncandavidson.com/)</span>
variants:
- name: article
  context:
    mods: [article]
    content: |
      <p class="lede">Video is a bigger part of the web experience than ever before. With native browser support for <span class="caps">HTML5</span> video elements freeing us from the tyranny of plugins, and the availability of faster <strong>internet</strong> connections to the workplace, home and mobile networks, it’s now pretty straightforward to publish video in a way that can be consumed in all sorts of ways on all sorts of different web devices.</p>

      I recently worked on a project where the client had shot some dedicated video shorts to publish on their site. They also had some <strong>five-second</strong> motion graphics produced to top and tail the videos with context and branding. This pretty common requirement is a great idea on the web, where a user might land at your video having followed a link and be viewing a page without much context.

      <blockquote>
      <p>[I]t appears probable that the progenitors of man, either the males or females or both sexes, before acquiring the power of expressing their mutual love in articulate language, endeavoured to charm each other with musical notes and rhythm.</p>
      <footer>—Charles <span class="caps">DARWIN</span>, <cite>The Descent of Man, and Selection in Relation to Sex</cite>, 1871</footer>
      </blockquote>

      Known as _bumpers_, these short introduction clips help brand a video and make it look a lot more professional.

      <figure>
        <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
        <figcaption>Index cards represent each feature the rental property software would launch with.</figcaption>
      </figure>

      <figure>
        <div class="s-gallery">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
        </div>
        <figcaption>Index cards represent each feature the rental property software would launch with.</figcaption>
      </figure>

      <figure>
        <div class="s-gallery">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
        </div>
        <figcaption>Index cards represent each feature the rental property software would launch with.</figcaption>
      </figure>

      <figure>
        <div class="s-gallery">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
          <img src="https://media.24ways.org/2013/baxter/indexcards.jpg" alt="Index cards">
        </div>
        <figcaption>Index cards represent each feature the rental property software would launch with.</figcaption>
      </figure>

      ## Heading 2
      The simplest way to add bumpers to a video would be to edit them on to the start and end of the video file itself. Cooking the bumpers into the video file is easy, but should you ever want to update them it can become a real headache. If the branding needs updating, for example, you'd need to re-edit and re-encode all your videos. Not a fun task.

      Save the document by pressing <kbd><kbd>Ctrl</kbd> + <kbd>S</kbd></kbd>

      There are many, many options for recording your screen, including QuickTime Player on Mac OS X (<kbd><kbd><samp>File</samp></kbd> → <kbd><samp>New Screen Recording</samp></kbd></kbd>), <a href="http://www.gifgrabber.com/">GifGrabber</a>, or <a href="http://giffingtool.com">Giffing Tool</a> on Windows.

      Just <samp>sample</samp> text.

      ## Heading 2…
      ### …followed by a heading 3
      What if the bumpers could be added dynamically? That would enable you to use the same bumper for multiple videos (decreasing download time for users who might watch more than one) and to update the bumpers whenever you wanted. You could change them seasonally, update them for special promotions, run different advertising slots, perform multivariate testing, or even target different bumpers to different users.

      [View an example](#)

      > The responsive projects I've worked on have had a lot of success combining design and development into one hybrid phase, bringing the two teams into one highly collaborative group.
      >
      > * A list inside a blockquote
      > * Is a very fine thing
      >
      > A lot of success combining design and development into one hybrid phase, bringing the two teams into one highly collaborative group.
      >
      > 1. How about an ordered list
      > 2. Inside a blockquote, too?

      ### Heading 3
      The trade-off, of course, is that if you dynamically add your bumpers, there's a chance that a user in a given circumstance might not see the bumper. For example, if the main video feature was uploaded to YouTube, you'd have no way to control the playback. As always, you need to weigh up the pros and cons and make your choice.

      #### Heading 4
      If you wanted to dynamically add bumpers to your HTML5 video, how would you go about it? That was the question I found myself needing to answer for this particular client project.

      ##### Heading 5
      My initial thought was to treat it just like an image slideshow. If I were building a slideshow that moved between images, I'd use CSS absolute positioning with `z-index` to stack the images up on top of each other in a pile, with the first image on top. To transition to the second image, I'd use JavaScript to fade the top image out, revealing the second image beneath it.

      <figure>
        <div class="s-embed s-embed--widescreen">
          <iframe src="https://www.youtube.com/embed/QILiHiTD3uc" frameborder="0" allowfullscreen></iframe>
        </div>
        <figcaption>Example of responsive video embed.</figcaption>
      </figure>

      Now that video is just a native object in the <span class="caps">DOM</span>, just like an image, why not do the same? Stack the videos up with the opening bumper on top, listen for the video's `onended` event, and fade it out to reveal the main feature behind. Good idea, right?

      | The Very Best `Eggnog`         | Serves 12       | Serves 24 |
      |--------------------------------|-----------------|-----------|
      | Milk                           | 1 quart         | 2 quart   |
      | Cinnamon Sticks                | 1               | 2         |
      | Vanilla Bean, Split            | 1               | 2         |
      | Cloves                         | 5               | 10        |
      | Mace                           | 10              | 20        |
      | Egg Yolks                      | 12              | 24        |
      | Cups Sugar                     | 1 &frac12; cups | 3 cups    |
      | Dark Rum                       | 1 &frac12; cups | 3 cups    |
      | Brandy                         | 1 &frac12; cups | 3 cups    |
      | Vanilla                        | 1 tbsp          | 2 tbsp    |
      | <ul><li>Light Cream</li><li>Double Cream</li></ul> | 1 quart         | 2 quart   |

      Remember that this is the web. It's never going to be that easy. The problem here is that many non-desktop devices use native, dedicated video players. Think about watching a video on a mobile phone -- when you play the video, the phone often goes full-screen in its native player, leaving the web page behind. There's no opportunity to fade or switch `z-index`, as the video isn't being viewed in the page. Your page is left powerless. Powerless!

      <img src="https://media.24ways.org/2012/mclellan/media-player.jpg" alt="iOS full-screen media player" />

      So what can we do? What can we control?

      ***

      Those of us with particularly long memories might recall a time before CSS, when we'd have to use JavaScript to perform image rollovers. As CSS background images weren't a practical reality, we would use lots of `<img>` elements, and perform a rollover by modifying the `src` attribute of the image.

      Turns out, this old trick of modifying the source can help us out with video, too. In most cases, modifying the `src` attribute of a `<video>` element, or perhaps more likely the `src` attribute of a `source` element, will swap from one video to another.

      ## Swappin' it
      Let's take a deliberately simple example of a super-basic video tag:

      ```html
      <video src="mycat.webm" controls>no fallback coz i is lame, innit.</video>
      ```

      We could very simply write a script to find all video tags and give them a new `src` to show our bumper.

      ```html
      <script>
        var videos, i, l;
        videos = document.getElementsByTagName('video');

        for(i=0, l=videos.length; i<l; i++) {
          videos[i].setAttribute('src', 'bumper-in.webm');
        }
      </script>
      ```

      [View the example](https://media.24ways.org/2012/mclellan/examples/1.html) in a browser with WebM support. You'll see that the video is swapped out for the opening bumper. Great!

      ## Beefing it up
      Of course, we can't just publish video in one format. In practical use, you need a `<video>` element with multiple `<source>` elements containing your different source formats.

      ```html
      <video controls>
        <source src="mycat.mp4" type="video/mp4" />
        <source src="mycat.webm" type="video/webm" />
        <source src="mycat.ogv" type="video/ogg" />
      </video>
      ```

      This time, our script needs to loop through the sources, not the videos. We'll use a regular expression replacement to swap out the file name while maintaining the correct file extension.

      ```html
      <script>
        var sources, i, l, orig;
        sources = document.getElementsByTagName('source');

        for(i=0, l=sources.length; i<l; i++) {
          orig = sources[i].getAttribute('src');
          sources[i].setAttribute('src', orig.replace(/(w+).(w+)/, 'bumper-in.$2'));

          // Reload the video
          sources[i].parentNode.load();
        }
      </script>
      ```

      The difference this time is that when changing the `src` of a `<source>` we need to call the `.load()` method on the video to get it to acknowledge the change.

      [See the code in action](https://media.24ways.org/2012/mclellan/examples/2.html), this time in a wider range of browsers.

      ## But, my video!
      * Store the original `src` in a `data-` attribute so we can access it later
      * Add an event listener so we can detect the end of the bumper playing, and load the original video back in

      I guess we should get the original video playing again. Keeping the same markup, we need to modify the script to do two things:

      * Store the original `src` in a `data-` attribute so we can access it later
      * Add an event listener so we can detect the end of the bumper playing, and load the original video back in

      As we need to loop through the videos this time to add the event listener, I've moved the `.load()` call into that loop. It's a bit more efficient to call it only once after modifying all the video's sources.

      * **Raspberry Pi** any of the following models :
        * Zero (will need straight male header pins soldered2 and Micro USB OTG adaptor),
          * A+, B+, 2 or 3
      * **Micro SD card** at least 4Gb Class 10 speed3
      * **Micro USB power supply** at least 2A
      * **USB Wifi dongle** (unless you have a Pi 3 - that has wifi built in).

      ```html
      <script>
        var videos, sources, i, l, orig;
        sources = document.getElementsByTagName('source');

        for(i=0, l=sources.length; i<l; i++) {
          orig = sources[i].getAttribute('src');
          sources[i].setAttribute('data-orig', orig);
          sources[i].setAttribute('src', orig.replace(/(w+).(w+)/, 'bumper-in.$2'));
        }

        videos = document.getElementsByTagName('video');

        for(i=0, l=videos.length; i<l; i++) {
          videos[i].load();
          videos[i].addEventListener('ended', function(){
            sources = this.getElementsByTagName('source');
            for(i=0, l=sources.length; i<l; i++) {
              orig = sources[i].getAttribute('data-orig');
              if (orig) {
                sources[i].setAttribute('src', orig);
              }
              sources[i].setAttribute('data-orig','');
            }
            this.load();
            this.play();
          });
        }
      </script>
      ```

      Again, [view the example](https://media.24ways.org/2012/mclellan/examples/3.html) to see the bumper play, followed by our spectacular main feature. (That's my cat, Widget. His interests include sleeping and internet marketing.)

      ## Tidying things up
      The final thing to do is add our closing bumper after the main video has played. This involves the following changes:

      1. We need to keep track of whether the `src` has been changed, so we only play the video if it's changed. I've added the `modified` variable to track this, and it stops us getting into a situation where the video just loops forever.
      2. Add an `else` to the event listener, for when the `orig` is false (so the main feature has been playing) to load in the end bumper. We also check that we're not already playing the end bumper. Because looping.

      ```html
      <script>
        var videos, sources, i, l, orig, current, modified;
        sources = document.getElementsByTagName('source');

        for(i=0, l=sources.length; i<l; i++) {
          orig = sources[i].getAttribute('src');
          sources[i].setAttribute('data-orig', orig);
          sources[i].setAttribute('src', orig.replace(/(w+).(w+)/, 'bumper-in.$2'));
        }

        videos = document.getElementsByTagName('video');

        for(i=0, l=videos.length; i<l; i++) {
          videos[i].load();
          modified = false;

          videos[i].addEventListener('ended', function(){
            sources = this.getElementsByTagName('source');

            for(i=0, l=sources.length; i<l; i++) {
              orig = sources[i].getAttribute('data-orig');
              if (orig) {
                sources[i].setAttribute('src', orig);
                modified = true;
              } else {
                current = sources[i].getAttribute('src');
                if (current.indexOf('bumper-out')==-1) {
                  sources[i].setAttribute('src', current.replace(/([w]+).(w+)/, 'bumper-out.$2'));
                  modified = true;
                } else {
                  this.pause();
                  modified = false;
                }
              }
              sources[i].setAttribute('data-orig','');
            }

            if (modified) {
              this.load();
              this.play();
            }
          });
        }
      </script>
      ```

      Yo ho ho, that's a lot of JavaScript. [See it in action](https://media.24ways.org/2012/mclellan/examples/4.html) -- you should get a bumper, the cat video, and an end bumper.

      Of course, this code works fine for demonstrating the principle, but it's very procedural. Nothing wrong with that, but to do something similar in production, you'd probably want to make the code more modular to ease maintainability. Besides, you may want to use a framework, rather than basic JavaScript.

      ## The end credits
      One really important principle here is that of **progressive enhancement**. If the browser doesn't support JavaScript, the user won't see your bumper, but they will get the main video. If the browser supports JavaScript but doesn't allow you to modify the `src` (as was the case with older versions of iOS), the user won't see your bumper, but they will get the main video.

      At Twitter, *every commit* gets a code review. We do a lot of reviewing, so small efficiency and effectiveness improvements make a big difference. Over time we've learnt a few things:

      * Don't review for *more than hour*[^1]
      * Keep reviews *smaller than ~400 lines*[^2]

      [^1]: Dunsmore et al. 2000. Object-Oriented Inspection in the Face of Delocalisation. Beverly, MA: SmartBear Software.

      [^2]: Cohen, Jason. 2006. Best Kept Secrets of Peer Code Review. *Proceedings of the 22nd ICSE 2000*: 467-476.

      If a search engine or social media bot grabs your page and looks for content, they won't see your bumper, but they will get the main video -- which is absolutely what you want.

      This means that if the bumper is absolutely crucial, you may still need to cook it into the video. However, for many applications, running it dynamically can work quite well.

      As always, it comes down to three things:

      1. Measure your audience: know how people access your site
      2. Test the solution: make sure it works for your audience
      3. Plan for failure: it's the web and that's how things work 'round these parts

      But most of all **play around with it, have fun and build something awesome**.

      *[CSS]: Cascading Style Sheets
      *[HTML5]: Hyper Text Markup Language 5
